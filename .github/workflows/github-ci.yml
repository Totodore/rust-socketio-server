name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - uses: dtolnay/rust-toolchain@master
          with:
            toolchain: stable
            components: rustfmt
        - run: cargo fmt --all -- --check
  
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo test --tests --all-features --workspace

  udeps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-udeps
        uses: taiki-e/install-action@cargo-udeps
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-nightly
      - name: Check unused dependencies on default features
        run: cargo udeps --workspace

      - name: Check unused dependencies on all features
        run: cargo udeps --all-features --workspace

  msrv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get MSRV from package metadata
        id: msrv
        run: grep rust-version Cargo.toml | cut -d'"' -f2 | sed 's/^/version=/' >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ steps.msrv.outputs.version }}
      - uses: dtolnay/rust-toolchain@master
        with:
            toolchain: ${{ steps.msrv.outputs.version }}
            components: rustfmt, clippy

      - name: check crates
        run: cargo check -p socketioxide -p engineioxide --all-features

  feature_set:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install cargo-hack
        run: cargo install cargo-hack

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: check --feature-powerset
        run: cargo hack check --feature-powerset --no-dev-deps --skip test-utils -p socketioxide -p engineioxide

  doctest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo test --doc --all-features

  rust-clippy-analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-clippy

      - name: Install required cargo
        run: cargo install clippy-sarif sarif-fmt || true

      - name: Run rust-clippy
        run:
          cargo clippy
          --all-features
          --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true
    
  engine_io:
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        engineio-version: [v3, v4]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: actions/checkout@v4
        with:
          repository: totodore/engine.io-protocol
          path: engine.io-protocol
          ref: ${{ matrix.engineio-version }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release
      - name: Install deps & run tests 
        run: |
          cd engine.io-protocol/test-suite && npm install && cd ../..
          cargo build --bin engineioxide-e2e --features ${{ matrix.engineio-version }} --release --workspace
          cargo run -p engineioxide-e2e --bin engineioxide-e2e --features ${{ matrix.engineio-version }} --release > server.txt & npm --prefix engine.io-protocol/test-suite test > client.txt
      - name: Server output
        if: always()
        run: cat server.txt
      - name: Client output
        if: always()
        run:  cat client.txt

  socket_io:
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        socketio-version: [v4, v5]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: actions/checkout@v4
        with:
          repository: totodore/socket.io-protocol
          ref: ${{ matrix.socketio-version }}
          path: socket.io-protocol
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release
      - name: Install deps & run tests 
        run: |
          cd socket.io-protocol/test-suite && npm install && cd ../..
          cargo build --bin socketioxide-e2e --features ${{ matrix.socketio-version }} --release --workspace
          cargo run -p socketioxide-e2e --bin socketioxide-e2e --features ${{ matrix.socketio-version }} --release  --workspace > server.txt & npm --prefix socket.io-protocol/test-suite test > client.txt
      - name: Server output
        if: always()
        run: cat server.txt
      - name: Client output
        if: always()
        run:  cat client.txt
